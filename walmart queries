                                                                       Walmart Sales Data Analysis
=======================================================================================================================================================================

About

This project aims to explore the Walmart Sales data to understand top performing branches and
products, sales trend of of different products, customer behaviour. The aims is to study how sales
strategies can be improved and optimized. The dataset was obtained from the [Kaggle Walmart Sales
Forecasting Competition](https://www.kaggle.com/c/walmart-recruiting-store-sales-forecasting).
"In this recruiting competition, job-seekers are provided with historical sales data for 45 Walmart stores
located in different regions. Each store contains many departments, and participants must project the
sales for each department in each store. To add to the challenge, selected holiday markdown events are
included in the dataset. These markdowns are known to affect sales, but it is challenging to predict
which departments are affected and the extent of the impact."

[source](https://www.kaggle.com/c/walmart-recruiting-store-sales-forecasting)

Purposes Of The Project
The major aim of thie project is to gain insight into the sales data of Walmart to understand the different
factors that affect sales of the different branches.

About Data
The dataset was obtained from the [Kaggle Walmart Sales Forecasting
Competition](https://www.kaggle.com/c/walmart-recruiting-store-sales-forecasting). This dataset
contains sales transactions from a three different branches of Walmart, respectively located in Mandalay,
Yangon and Naypyitaw. The data contains 17 columns and 1000 rows:

| Column | Description | Data Type |
| :---------------------- | :-------------------------------------- | :------------- |
| invoice_id | Invoice of the sales made | VARCHAR(30) |
| branch | Branch at which sales were made | VARCHAR(5) |
| city | The location of the branch | VARCHAR(30) |
| customer_type | The type of the customer | VARCHAR(30) |
| gender | Gender of the customer making purchase | VARCHAR(10) |
| product_line | Product line of the product solf | VARCHAR(100) |
| unit_price | The price of each product | DECIMAL(10, 2) |
| quantity | The amount of the product sold | INT |
| VAT | The amount of tax on the purchase | FLOAT(6, 4) |
| total | The total cost of the purchase | DECIMAL(10, 2) |
| date | The date on which the purchase was made | DATE |
| time | The time at which the purchase was made | TIMESTAMP |
| payment_method | The total amount paid | DECIMAL(10, 2) |
| cogs | Cost Of Goods sold | DECIMAL(10, 2) |
| gross_margin_percentage | Gross margin percentage | FLOAT(11, 9) |
| gross_income | Gross Income | DECIMAL(10, 2) |
| rating | Rating | FLOAT(2, 1) |

Analysis List
1. Product Analysis
> Conduct analysis on the data to understand the different product lines, the products lines performing
best and the product lines that need to be improved.
2. Sales Analysis
> This analysis aims to answer the question of the sales trends of product. The result of this can help use
measure the effectiveness of each sales strategy the business applies and what modificatoins are needed
to gain more sales.
3. Customer Analysis
> This analysis aims to uncover the different customers segments, purchase trends and the profitability
of each customer segment.

Approach Used

1. **Data Wrangling:** This is the first step where inspection of data is done to make sure **NULL**
values and missing values are detected and data replacement methods are used to replace, missing or
**NULL** values.
> 1. Build a database
> 2. Create table and insert the data.
> 3. Select columns with null values in them. There are no null values in our database as in creating the
tables, we set **NOT NULL** for each field, hence null values are filtered out.
2. **Feature Engineering:** This will help use generate some new columns from existing ones.
> 1. Add a new column named `time_of_day` to give insight of sales in the Morning, Afternoon and
Evening. This will help answer the question on which part of the day most sales are made.
> 2. Add a new column named `day_name` that contains the extracted days of the week on which the
given transaction took place (Mon, Tue, Wed, Thur, Fri). This will help answer the question on which
week of the day each branch is busiest.
> 3. Add a new column named `month_name` that contains the extracted months of the year on which
the given transaction took place (Jan, Feb, Mar). Help determine which month of the year has the most
sales and profit.

2. **Exploratory Data Analysis (EDA):** Exploratory data analysis is done to answer the listed questions
and aims of this project.
3. **Conclusion:**
## Business Questions To Answer

======================================================================================================================================================================


=======================================================================================================================================================================
Revenue And Profit Calculations
$ COGS = unitsPrice * quantity $
$ VAT = 5\% * COGS $
$VAT$ is added to the $COGS$ and this is what is billed to the customer.
$ total(gross_sales) = VAT + COGS $
$ grossProfit(grossIncome) = total(gross_sales) - COGS $
**Gross Margin** is gross profit expressed in percentage of the total(gross profit/revenue)
$ \text{Gross Margin} = \frac{\text{gross income}}{\text{total revenue}} $
<u>**Example with the first row in our DB:**</u>
**Data given:**
- $ \text{Unite Price} = 45.79 $
- $ \text{Quantity} = 7 $
$ COGS = 45.79 * 7 = 320.53 $
$ \text{VAT} = 5\% * COGS\\= 5\% 320.53 = 16.0265 $
$ total = VAT + COGS\\= 16.0265 + 320.53 = $336.5565$
$ \text{Gross Margin Percentage} = \frac{\text{gross income}}{\text{total
revenue}}\\=\frac{16.0265}{336.5565} = 0.047619\\\approx 4.7619\% $
```sql

-- Create database

CREATE DATABASE IF NOT EXISTS walmartSales;
-- Create table-----

CREATE TABLE IF NOT EXISTS sales(
invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
branch VARCHAR(5) NOT NULL,
city VARCHAR(30) NOT NULL,
customer_type VARCHAR(30) NOT NULL,
gender VARCHAR(30) NOT NULL,
product_line VARCHAR(100) NOT NULL,
unit_price DECIMAL(10,2) NOT NULL,
quantity INT NOT NULL,
tax_pct FLOAT(6,4) NOT NULL,
total DECIMAL(12, 4) NOT NULL,
date DATETIME NOT NULL,
time TIME NOT NULL,
payment VARCHAR(15) NOT NULL,
cogs DECIMAL(10,2) NOT NULL,
gross_margin_pct FLOAT(11,9),
gross_income DECIMAL(12, 4),
rating FLOAT(2, 1)
);
```
SELECT * FROM if_not_exists_sales;


select Product_line from if_not_exists_sales;
SELECT time,
(CASE 
	WHEN `time` BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
	WHEN `time` BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
	ELSE "Evening" 
END) AS time_of_day
FROM if_not_exists_sales;

ALTER TABLE if_not_exists_sales ADD COLUMN time_of_day VARCHAR(20);
alter table if_not_exists_sales drop time_of_day ;

UPDATE if_not_exists_sales
SET time_of_day = (
	CASE 
		WHEN `time` BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
		WHEN `time` BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
		ELSE "Evening" 
	END
);

SELECT date,
DAYNAME(date) AS day_name
FROM IF_NOT_EXISTS_sales;

ALTER TABLE IF_NOT_EXISTS_sales ADD COLUMN day_name VARCHAR(10);

UPDATE IF_NOT_EXISTS_sales
SET day_name = DAYNAME(date);

SELECT date,
MONTHNAME(date) AS month_name
FROM IF_NOT_EXISTS_sales;

ALTER TABLE IF_NOT_EXISTS_sales ADD COLUMN month_name VARCHAR(10);

UPDATE IF_NOT_EXISTS_sales
SET month_name = MONTHNAME(date);

SELECT product_line, SUM(gross_margin_pct) AS VAT
FROM IF_NOT_EXISTS_sales group by product_line order by VAT desc limit 1;

ALTER TABLE IF_NOT_EXISTS_sales ADD COLUMN product_type VARCHAR(20);


### Generic Question
1. How many unique cities does the data have?
SELECT COUNT(DISTINCT City) FROM IF_NOT_EXISTS_sales;

2. In which city is each branch?
SELECT DISTINCT branch, city FROM IF_NOT_EXISTS_sales;

==========================================================================================================================================================
### Product
1. How many unique product lines does the data have?
SELECT count(DISTINCT product_line)
FROM IF_NOT_EXISTS_sales;

2. What is the most common payment method?
SELECT payment, COUNT(payment) AS common_payment_method 
FROM IF_NOT_EXISTS_sales group by payment order by common_payment_method desc limit 1;

3. What is the most selling product line?
select product_line, count(product_line) as mostSelling_product_line
from IF_NOT_EXISTS_sales group by product_line order by mostSelling_product_line desc limit 1;

4. What is the total revenue by month?
SELECT month_name, SUM(total) AS total_revenue
FROM IF_NOT_EXISTS_sales group by month_name order by total_revenue desc;

5. What month had the largest COGS?
select month_name, sum(cogs) as total_sold_cogs
from IF_NOT_EXISTS_sales group by month_name order by total_sold_cogs desc;

6. What product line had the largest revenue?
select month_name, sum(cogs) as total_sold_cogs
from IF_NOT_EXISTS_sales group by month_name order by total_sold_cogs desc limit 1;


5. What is the city with the largest revenue?
SELECT product_line, SUM(total) AS total_revenue
FROM IF_NOT_EXISTS_sales group by product_line order by total_revenue desc limit 1;

6. What product line had the largest VAT?
SELECT city, SUM(total) AS total_revenue
FROM IF_NOT_EXISTS_sales group by city order by total_revenue desc limit 1;

7. Fetch each product line and add a column to those product line showing "Good", "Bad". Good if its
greater than average sales
UPDATE IF_NOT_EXISTS_sales
SET product_type = 
    CASE 
        WHEN total >= (SELECT avg_total FROM (SELECT AVG(total) AS avg_total FROM IF_NOT_EXISTS_sales) AS subquery) 
        THEN 'good'
        ELSE 'bad'
    END;

8. Which branch sold more products than average product sold?
SELECT branch, SUM(quantity) AS quantity
FROM IF_NOT_EXISTS_sales GROUP BY branch HAVING SUM(quantity) > AVG(quantity) ORDER BY quantity DESC LIMIT 1;


9. What is the most common product line by gender?
SELECT gender, product_line, COUNT(gender) total_count
FROM IF_NOT_EXISTS_sales GROUP BY gender, product_line ORDER BY total_count DESC;   

12. What is the average rating of each product line?
SELECT product_line, ROUND(avg(rating),2) avg_rating
FROM IF_NOT_EXISTS_sales GROUP BY product_line ORDER BY avg_rating DESC;  

================================================================================================================================================================
Sales

1. Number of sales made in each time of the day per weekday
SELECT day_name, time_of_day, COUNT(invoice_id) AS total_sales
FROM IF_NOT_EXISTS_sales GROUP BY day_name, time_of_day HAVING day_name NOT IN ('Sunday','Saturday');    

2. Which of the customer types brings the most revenue?
SELECT customer_type, sum(total) revenue
FROM IF_NOT_EXISTS_sales GROUP BY customer_type ORDER BY revenue DESC LIMIT 1 ; 

3. Which city has the largest tax percent/ VAT (**Value Added Tax**)?
SELECT city, sum(tax_pct) large_VAT
FROM IF_NOT_EXISTS_sales GROUP BY city ORDER BY large_VAT DESC LIMIT 1 ;  

4. Which customer type pays the most in VAT?
SELECT customer_type, sum(tax_pct) pay_VAT
FROM IF_NOT_EXISTS_sales GROUP BY customer_type ORDER BY pay_VAT DESC LIMIT 1 ;  

============================================================================================================================================================
Customer

1. How many unique customer types does the data have?
SELECT COUNT(DISTINCT customer_type) FROM IF_NOT_EXISTS_sales ;  

2. How many unique payment methods does the data have?
SELECT COUNT(DISTINCT payment) FROM IF_NOT_EXISTS_sales ;  

3. What is the most common customer type?
SELECT customer_type, count(customer_type) common_customer
FROM IF_NOT_EXISTS_sales GROUP BY customer_type ORDER BY common_customer DESC LIMIT 1 ;  

4. Which customer type buys the most?
SELECT customer_type, sum(total) as most_buys
FROM IF_NOT_EXISTS_sales GROUP BY customer_type ORDER BY most_buys DESC LIMIT 1 ;

5. What is the gender of most of the customers?

SELECT gender, COUNT(*) AS most_gender
FROM IF_NOT_EXISTS_sales GROUP BY gender ORDER BY most_gender DESC LIMIT 1 ;

6. What is the gender distribution per branch?
SELECT gender, branch, COUNT(gender) AS gender_distribution
FROM IF_NOT_EXISTS_sales GROUP BY gender, branch ORDER BY branch ;

7. Which time of the day do customers give most ratings?
SELECT time_of_day, AVG(rating) AS most_rating
FROM IF_NOT_EXISTS_sales GROUP BY time_of_day ORDER BY most_rating DESC;

8. Which time of the day do customers give most ratings per branch?
SELECT time_of_day, branch , AVG(rating) AS most_rating
FROM IF_NOT_EXISTS_sales GROUP BY time_of_day , branch ORDER BY most_rating DESC;

9. Which day fo the week has the best avg ratings?
SELECT day_name, AVG(rating) AS best_day_rating
FROM IF_NOT_EXISTS_sales GROUP BY day_name ORDER BY best_day_rating DESC;

10. Which day of the week has the best average ratings per branch?
SELECT branch, time_of_day, AVG(rating) AS best_day_rating
FROM IF_NOT_EXISTS_sales GROUP BY branch, time_of_day ORDER BY best_day_rating DESC;









